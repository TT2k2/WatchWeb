//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebForm.TrademarkService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrademarkService.TrademarkServiceSoap")]
    public interface TrademarkServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTableByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTableByID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTableByID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTableByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTable", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Search", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Search(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Search", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> SearchAsync(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Add(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Add", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Update(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> UpdateAsync(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Delete", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TrademarkServiceSoapChannel : WebForm.TrademarkService.TrademarkServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrademarkServiceSoapClient : System.ServiceModel.ClientBase<WebForm.TrademarkService.TrademarkServiceSoap>, WebForm.TrademarkService.TrademarkServiceSoap {
        
        public TrademarkServiceSoapClient() {
        }
        
        public TrademarkServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrademarkServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrademarkServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrademarkServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetTableByID(string id) {
            return base.Channel.GetTableByID(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTableByIDAsync(string id) {
            return base.Channel.GetTableByIDAsync(id);
        }
        
        public System.Data.DataTable GetTable() {
            return base.Channel.GetTable();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTableAsync() {
            return base.Channel.GetTableAsync();
        }
        
        public System.Data.DataTable Search(string keyword) {
            return base.Channel.Search(keyword);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SearchAsync(string keyword) {
            return base.Channel.SearchAsync(keyword);
        }
        
        public bool Add(string name) {
            return base.Channel.Add(name);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string name) {
            return base.Channel.AddAsync(name);
        }
        
        public bool Update(string id, string name) {
            return base.Channel.Update(id, name);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(string id, string name) {
            return base.Channel.UpdateAsync(id, name);
        }
        
        public bool Delete(string id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
